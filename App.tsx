// ========================================
// App.tsx - Com verifica√ß√£o de plataforma para iOS e NFC REAL
// ========================================

import { Buffer } from 'buffer';
global.Buffer = Buffer;

// Polyfill necess√°rio para Solana Web3.js
import 'react-native-get-random-values';

import React, { useEffect, useState } from 'react';
import { StatusBar } from 'expo-status-bar';
import { View, Platform, Text, Alert } from 'react-native';
import { appStyles } from './src/styles/app.styles';

// Imports condicionais para evitar problemas no iOS
let PhantomConnectScreen: any;
let HomeScreen: any;
let usePhantom: any;
let NFCInitializer: any;

try {
  PhantomConnectScreen = require('./src/screens/auth/PhantomConnectScreen').default;
  HomeScreen = require('./src/screens/main/HomeScreen').default;
  usePhantom = require('./src/hooks/usePhantom').usePhantom;
  
  // ‚ú® NOVO: Import do NFCInitializer
  NFCInitializer = require('./src/services/nfc/NFCInitializer').NFCInitializer;
} catch (error) {
  console.error('‚ùå Erro ao importar componentes:', error);
}

export default function App() {
  // ‚ú® NOVO: Estado para inicializa√ß√£o do NFC
  const [nfcInitialized, setNfcInitialized] = useState(false);
  const [nfcError, setNfcError] = useState<string | null>(null);

  // ‚ú® NOVO: Inicializar NFC quando app carrega
  useEffect(() => {
    initializeNFC();
    
    // Cleanup quando app √© fechado
    return () => {
      if (NFCInitializer) {
        NFCInitializer.cleanup().catch((error: any) => {
          console.error('‚ùå Erro ao limpar NFC:', error);
        });
      }
    };
  }, []);

  // ‚ú® NOVO: Fun√ß√£o para inicializar NFC
  const initializeNFC = async () => {
    try {
      if (!NFCInitializer) {
        console.log('‚ö†Ô∏è NFCInitializer n√£o dispon√≠vel (normal em iOS/Expo Go)');
        setNfcError('NFC n√£o dispon√≠vel nesta plataforma');
        setNfcInitialized(true); // Continua sem NFC
        return;
      }

      console.log('üîÑ Inicializando NFC...');
      
      // Verificar disponibilidade primeiro
      const availability = await NFCInitializer.checkAvailability();
      console.log('üì± Disponibilidade NFC:', availability);

      if (!availability.supported) {
        console.log('‚ÑπÔ∏è NFC n√£o suportado neste dispositivo');
        setNfcError('NFC n√£o suportado neste dispositivo');
        setNfcInitialized(true); // Continua sem NFC
        return;
      }

      if (!availability.enabled) {
        console.log('‚ö†Ô∏è NFC n√£o habilitado nas configura√ß√µes');
        setNfcError('NFC n√£o habilitado nas configura√ß√µes');
        setNfcInitialized(true); // Continua sem NFC
        return;
      }

      // Inicializar NFC
      const success = await NFCInitializer.initialize();
      
      if (success) {
        console.log('üéâ NFC inicializado com sucesso!');
        setNfcError(null);
      } else {
        console.log('‚ùå Falha ao inicializar NFC');
        setNfcError('Falha ao inicializar NFC');
      }

      setNfcInitialized(true);

    } catch (error) {
      console.error('‚ùå Erro na inicializa√ß√£o do NFC:', error);
      setNfcError(error instanceof Error ? error.message : 'Erro desconhecido');
      setNfcInitialized(true); // Continua mesmo com erro
    }
  };

  // Se n√£o conseguiu importar os componentes (erro de depend√™ncias nativas)
  if (!PhantomConnectScreen || !HomeScreen || !usePhantom) {
    return (
      <View style={[appStyles.container, { justifyContent: 'center', alignItems: 'center', padding: 20 }]}>
        <StatusBar style="light" />
        <Text style={{ color: 'white', fontSize: 18, textAlign: 'center', marginBottom: 20 }}>
          üöß Funcionalidades Limitadas
        </Text>
        <Text style={{ color: '#AAAAAA', fontSize: 14, textAlign: 'center', lineHeight: 20 }}>
          {Platform.OS === 'ios'
            ? 'Para usar todas as funcionalidades NFC no iOS, voc√™ precisa criar um development build.\n\nEste √© um limite do Expo Go, n√£o do seu c√≥digo.'
            : 'Algumas depend√™ncias n√£o puderam ser carregadas. Verifique a instala√ß√£o.'}
        </Text>
      </View>
    );
  }

  // ‚ú® NOVO: Mostrar loading enquanto inicializa NFC
  if (!nfcInitialized) {
    return (
      <View style={[appStyles.container, { justifyContent: 'center', alignItems: 'center', padding: 20 }]}>
        <StatusBar style="light" />
        <Text style={{ color: 'white', fontSize: 18, textAlign: 'center', marginBottom: 20 }}>
          üîÑ Inicializando App...
        </Text>
        <Text style={{ color: '#AAAAAA', fontSize: 14, textAlign: 'center', lineHeight: 20 }}>
          Verificando funcionalidades NFC...
        </Text>
      </View>
    );
  }

  // Componente principal funcional
  return <MainApp nfcError={nfcError} />;
}

// ‚ú® ATUALIZADO: Componente principal com informa√ß√µes de NFC
const MainApp: React.FC<{ nfcError: string | null }> = ({ nfcError }) => {
  const { isConnected, publicKey, disconnect } = usePhantom();

  // ‚ú® NOVO: Mostrar aviso sobre NFC se houver erro (apenas uma vez)
  useEffect(() => {
    if (nfcError && Platform.OS === 'android') {
      // Mostrar aviso apenas no Android, no iOS √© esperado
      const timeout = setTimeout(() => {
        Alert.alert(
          'Aviso NFC',
          `${nfcError}\n\nVoc√™ ainda pode usar todas as outras funcionalidades do app, apenas as transfer√™ncias NFC n√£o estar√£o dispon√≠veis.`,
          [
            { text: 'OK', style: 'default' }
          ]
        );
      }, 2000); // Delay para n√£o atrapalhar outras inicializa√ß√µes

      return () => clearTimeout(timeout);
    }
  }, [nfcError]);

  // Renderizar tela de conex√£o se n√£o estiver conectado
  if (!isConnected || !publicKey) {
    return (
      <View style={appStyles.container}>
        <StatusBar style="light" />
        <PhantomConnectScreen />
      </View>
    );
  }

  // Renderizar HomeScreen quando conectado
  return (
    <View style={appStyles.container}>
      <StatusBar style="light" />
      <HomeScreen
        publicKey={publicKey}
        disconnect={disconnect}
      />
      
      {/* ‚ú® NOVO: Indicador de status NFC no canto da tela (opcional) */}
      {__DEV__ && (
        <View style={{
          position: 'absolute',
          top: 50,
          right: 10,
          backgroundColor: 'rgba(0,0,0,0.7)',
          paddingHorizontal: 8,
          paddingVertical: 4,
          borderRadius: 8,
          zIndex: 1000,
        }}>
          <Text style={{
            color: nfcError ? '#ef4444' : '#22c55e',
            fontSize: 10,
            fontWeight: '600',
          }}>
            NFC: {nfcError ? '‚ùå' : '‚úÖ'}
          </Text>
        </View>
      )}
    </View>
  );
};

// ========================================
// LOGS DE DEBUG PARA DESENVOLVIMENTO
// ========================================

if (__DEV__) {
  console.log('üöÄ App iniciado em modo desenvolvimento');
  console.log('üì± Plataforma:', Platform.OS);
  console.log('üîß Vers√£o:', Platform.Version);
  
  // Log de funcionalidades dispon√≠veis
  const features = {
    phantom: !!usePhantom,
    nfc: !!NFCInitializer,
    platform: Platform.OS,
  };
  console.log('üéØ Funcionalidades dispon√≠veis:', features);
}